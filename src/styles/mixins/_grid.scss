
$prefix-cls-col: #{$prefix-cls}-col;
// Grid system
//
// Generate semantic grid columns with these mixins.

// Centered container element
@mixin container-fixed($gutter: $grid-gutter-width) {
  margin-right: auto;
  margin-left: auto;
  padding-left:  floor(($gutter / 2));
  padding-right: ceil(($gutter / 2));
  @include clearfix;
}

// Creates a wrapper for a series of columns
@mixin make-row($gutter: $grid-gutter-width) {
  margin-left:  ceil(($gutter / -2));
  margin-right: floor(($gutter / -2));
  @include clearfix;
}

@mixin make-grid-columns($i: 1, $list: ".#{$prefix-cls-col}-span-#{$i},.#{$prefix-cls-col}-sx-#{$i}, .#{$prefix-cls-col}-sm-#{$i}, .#{$prefix-cls-col}-md-#{$i}, .#{$prefix-cls-col}-lg-#{$i}") {
    
    @for $i from (1 + 1) through $grid-columns {
        $list: "#{$list}, .#{$prefix-cls-col}-span-#{$i},.#{$prefix-cls-col}-sx-#{$i}, .#{$prefix-cls-col}-sm-#{$i}, .#{$prefix-cls-col}-md-#{$i}, .#{$prefix-cls-col}-lg-#{$i}";
    }
    #{$list} {
        position: relative;
        // Prevent columns from collapsing when empty
        min-height: 1px;
        // Inner gutter via padding
        padding-left:  ceil(($grid-gutter-width / 2));
        padding-right: floor(($grid-gutter-width / 2));
    }
}


@mixin float-grid-columns($class, $i: 1, $list: ".#{$prefix-cls-col}-#{$class}-#{$i}") {
    

    @for $i from (1 + 1) through $grid-columns {
        $list: "#{$list},.#{$prefix-cls-col}-#{$class}-#{$i}";
    }
    #{$list} {
        float: left;
        flex: 0 0 auto;
    }
}



@mixin calc-grid-column($index, $class, $type) {
    @if ($type == width) and ($index > 0) {
        @if ($class != ''){
            .#{$prefix-cls-col}#{$class}-#{$index} {
                width: percentage(($index / $grid-columns));
            }
        }
        @if ($class == ''){
            .#{$prefix-cls-col}-span-#{$index} {
            width: percentage(($index / $grid-columns));
            }
        }
    }
    @if ($type == pull) and ($index > 0) {
        .#{$prefix-cls-col}#{$class}-pull-#{$index} {
            right: percentage(($index / $grid-columns));
        }
    }
    @if ($type == push) and ($index > 0) {
        .#{$prefix-cls-col}#{$class}-push-#{$index} {
            left: percentage(($index / $grid-columns));
        }
    }
    @if ($type == offset){
        .#{$prefix-cls-col}#{$class}-offset-#{$index} {
            margin-left: percentage(($index / $grid-columns));
        }
    }
    @if ($type == order){
        .#{$prefix-cls-col}#{$class}-order-#{$index} {
            order:#{$index};
        }
    }
    @if ($index == 0) {
        .#{$prefix-cls-col}#{$class}-push-0 {
            left: auto;
        }
        .#{$prefix-cls-col}#{$class}-pull-0 {
            right: auto;
        }
    }
}

@mixin loop-grid-columns($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include calc-grid-column($i, $class, $type);
  }
}


@mixin make-grid($class:'') {
    @include loop-grid-columns($grid-columns, $class, width);
    @include loop-grid-columns($grid-columns, $class, pull);
    @include loop-grid-columns($grid-columns, $class, push);
    @include loop-grid-columns($grid-columns, $class, offset);
    @include loop-grid-columns($grid-columns, $class, order);
}